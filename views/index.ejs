<%- include('partials/header') -%>
    <section class="index">
        <nav class="Nav-bar">
            <div class="hamburger">
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
            </div>
            <div class="nav-bar-logo">
                <h5>MapCoronaCases</h5>
            </div>
            <ul class="nav-links">
                <li><a href="/">World</a></li>
                <li><a href="/india">India</a></li>
                <li><a href="/covid19">Covid-19</a></li>
                <li><a href="https://www.who.int/emergencies/diseases/novel-coronavirus-2019/donate" target="blank">Donate</a></li>
                <li><a href="/about">About</a></li>
                <li>
                    <a class="bmc-button" target="_blank" href="https://www.buymeacoffee.com/itherohit"><img src="https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg" alt="Coffee ?"><span style="margin-left:5px;font-size:28px !important;">Coffee ?</span></a>
                </li>
            </ul>
        </nav>
        <div class="search-section">
            <div class="search">
                <div class="search-input">
                    <input type="text" name="" id="searchInput" placeholder="Country / State">
                    <button class="search-icon"><i class="fas fa-search"></i></button>
                </div>
                <div class="search-drop">
                    <button class="search-drop-btn"><i class='fas fa-caret-down'></i></button>
                </div>
            </div>
            <div class="countries-section animate__animated">
                <% data_json.forEach(data => { %>
                    <div class="country-info">
                        <div class="country-name">
                            <img class="country-name-img" src="<%=data.img %>" >
                            <h6 class="country-name-header">
                                <%= data.country %>
                            </h6>
                        </div>
                        <div class="country-details ">
                            <div class="total country-info-icon ">
                                <p><i class="fas fa-virus "></i>
                                    <%= data.fcases %>
                                </p>
                            </div>
                            <div class="recovered country-info-icon ">
                                <p><i class="fas fa-heartbeat "></i> <span class="green "><%= data.frecovered %></span></p>
                            </div>
                            <div class="death country-info-icon ">
                                <p><i class="fas fa-skull "></i> <span class="red "><%= data.fdeaths %></span></p>
                            </div>
                        </div>
                    </div>
                    <% }); %>
            </div>
        </div>
    </section>
    <div id="map"></div>
    <script>
        var geojson = <%- geo_json %>;
        mapboxgl.accessToken = "pk.eyJ1IjoiaXRoZXJvaGl0IiwiYSI6ImNrZDFybTJqMTE2MmEzMWw3bGJmOXJvbXoifQ.3zTHwnLY5YUWA4LAlti3Ug";
        if (!mapboxgl.supported()) {
            alert("Your browser does not support Maps.Try to update your browser");
        } else {
            var map = new mapboxgl.Map({
                container: 'map',
                zoom: geojson.zoom,
                center: geojson.center,
                style: 'mapbox://styles/itherohit/ckc9xkk9q0aiw1jqcgwwltxnk',
                transition: {
                    duration: 300,
                    delay: 0
                }
            });

            function jumpTo(coordinates) {
                if (coordinates[0] === 0 && coordinates[1] === 0) {
                    var zoomnum = 1;
                } else {
                    var zoomnum = 4;
                }
                map.flyTo({
                    center: coordinates,
                    zoom: zoomnum,
                    speed: 0.6,
                    curve: 2
                });
            }

            var size = 200;

            // implementation of CustomLayerInterface to draw a pulsing dot icon on the map
            // see https://docs.mapbox.com/mapbox-gl-js/api/#customlayerinterface for more info
            var pulsingDot = {
                width: size,
                height: size,
                data: new Uint8Array(size * size * 4),

                // get rendering context for the map canvas when layer is added to the map
                onAdd: function() {
                    var canvas = document.createElement('canvas');
                    canvas.width = this.width;
                    canvas.height = this.height;
                    this.context = canvas.getContext('2d');
                },

                // called once before every frame where the icon will be used
                render: function() {
                    var duration = 1000;
                    var t = (performance.now() % duration) / duration;

                    var radius = (size / 2) * 0.3;
                    var outerRadius = (size / 2) * 0.7 * t + radius;
                    var context = this.context;

                    // draw outer circle
                    context.clearRect(0, 0, this.width, this.height);
                    context.beginPath();
                    context.arc(
                        this.width / 2,
                        this.height / 2,
                        outerRadius,
                        0,
                        Math.PI * 2
                    );
                    context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';
                    context.fill();

                    // draw inner circle
                    context.beginPath();
                    context.arc(
                        this.width / 2,
                        this.height / 2,
                        radius,
                        0,
                        Math.PI * 2
                    );
                    context.fillStyle = 'rgba(255, 100, 100, 1)';
                    context.strokeStyle = 'white';
                    context.lineWidth = 2 + 4 * (1 - t);
                    context.fill();
                    context.stroke();

                    // update this image's data with data from the canvas
                    this.data = context.getImageData(
                        0,
                        0,
                        this.width,
                        this.height
                    ).data;

                    // continuously repaint the map, resulting in the smooth animation of the dot
                    map.triggerRepaint();

                    // return `true` to let the map know that the image was updated
                    return true;
                }
            };

            // geojson.features.forEach(marker => {
            //     new mapboxgl.Marker()
            //         .setLngLat([-75.06162, 43.282537])
            //         .addTo(map);
            // });
            var popup = new mapboxgl.Popup({
                closeButton: false,
                closeOnClick: false
            });
            map.on('load', function() {
                map.addImage('pulsing-dot', pulsingDot, {
                    pixelRatio: 2
                });
                map.addSource('points', {
                    'type': 'geojson',
                    'data': geojson
                });

                map.addLayer({
                    'id': 'points',
                    'type': 'circle',
                    'source': 'points',
                    'paint': {
                        'circle-radius': 4,
                        'circle-color': '#B42222'
                    },
                    'filter': ['==', '$type', 'Point']
                });

                map.on('mouseenter', 'points', function(e) {
                    // Change the cursor style as a UI indicator.
                    map.getCanvas().style.cursor = 'pointer';

                    var coordinates = e.features[0].geometry.coordinates.slice();
                    var description = e.features[0].properties.description;

                    // Ensure that if the map is zoomed out such that multiple
                    // copies of the feature are visible, the popup appears
                    // over the copy being pointed to.
                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                    }
                    // Populate the popup and set its coordinates
                    // based on the feature found.
                    popup
                        .setLngLat(coordinates)
                        .setHTML(description)
                        .addTo(map);
                });

                map.on('mouseleave', 'points', function() {
                    map.getCanvas().style.cursor = '';
                });
                if (screen.width > 750) {
                    map.on('click', function() {
                        if (popup) {
                            popup.remove();
                        }
                    })
                }
            });

            let countryInfo = document.querySelectorAll('div .country-info');
            let countryName = document.querySelectorAll('div .country-name-header');
            for (let i = 0; i < countryInfo.length; i++) {
                countryInfo[i].addEventListener('click', () => {
                    if (map.getSource('indicator')) {
                        map.removeLayer('indicator');
                        map.removeSource('indicator');
                    }
                    if (geojson.features[i].geometry.coordinates[0] != 0) {
                        map.addSource('indicator', {
                            'type': 'geojson',
                            'data': {
                                'type': 'FeatureCollection',
                                'features': [{
                                    'type': 'Feature',
                                    'geometry': {
                                        'type': 'Point',
                                        'coordinates': geojson.features[i].geometry.coordinates
                                    }
                                }]
                            }
                        });
                        map.addLayer({
                            'id': 'indicator',
                            'type': 'symbol',
                            'source': 'indicator',
                            'layout': {
                                'icon-image': 'pulsing-dot'
                            }
                        });
                    }
                    if (popup) {
                        popup.remove();
                    }
                    jumpTo(geojson.features[i].geometry.coordinates);
                    console.log(geojson.features[i]);
                })
            }
        }
    </script>
    <%- include('partials/footer') -%>